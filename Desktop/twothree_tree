import java.util.ArrayList;
import java.util.HashSet;

public class TwoThreeTree {
	
	private ArrayList<Node> tree;
	private Node root;
	
	public TwoThreeTree() {
		// nothing should be in here
	}
	
	/*
	 * TwoThreeTree will need an insert(int x) method, which will insert the value x into your tree. 
	 * For this tree, duplicate insertions should be discarded. 
	 * If I insert a value into the tree which is already in the tree, do not change your tree. 
	 * Your method should return true if the element is added (which should happen if it isn't already in the tree), 
	 * and false if it is not added (if the number was already in the tree).
	 */
	
	public boolean insert(int x) {
		// root.insert(x);
		Node toAdd = new Node(x);
		
		for (int i = 0; i < tree.size(); i++) {							// delete duplicate values
			Node toCheck = tree.get(i);
			if(toCheck.equals(toAdd)) {
				return false;
			}
		}
		
		tree.add(toAdd);													// but which node to add to?
		
		toAdd.setleft(null);
		toAdd.setMid(null);
		toAdd.setRight(null);
		
		/*
		 * if (root == null) {
			root = toAdd;			// should i add this or will it cause problems (and is unnecessary anyway)
		}
		 */
		
		moveUp(toAdd);
		return true;
	}
	
	public void moveUp(Node theX) {
		
	}
	
	/*
	 * TwoThreeTree will need a search(int x) method, which will search for the value x in your tree. 
	 * The method should return a String, formatted as follows. 
	 * If the value x is in the tree, it will reside in a node with either one or two keys. 
	 * For a one key node, the string will just be that node's key as a String. 
	 * If it is a two key node, the string should be the two values, in increasing order, with a single space between them. 
	 * 
	 * Example: if we are searching for the number 17, and it is a key alone in a node, 
	 * the search function should return "17". 
	 * If it is in a node with 35, you should return "17 35". 
	 * If it is in a node with 3, you should return "3 17". 
	 * Do not format differently. No different spaces, no extra spaces at the end.
	 * If the value searched for is not in the tree, your search should have terminated at a leaf node. 
	 * In that case, print the contents of that leaf node, with the same formatting described above. 
	 * That is, if 17 is not in the tree, and you end in a node that contains keys 18 and 20, return "18 20".
	 */
	
	public String search(int x) {
		return root.search(x).toString();
	}
	
	
	public class Node {

		private int lowKey;
		private int highKey;
		private int extraKey; //temporary placeholder
	
		private Node parent;
		private Node leftChild;
		private Node midChild;
		private Node rightChild;
		
		// Node constructors for 1-3 keys
		public Node() {			
		}
		
		public Node(int lowKey) {						
			this.lowKey = lowKey;
			this.highKey = lowKey - 1;
		}
		
		public Node(int lowKey, int highKey) {						
			this.lowKey = lowKey;
			this.highKey = highKey;
		}
		
		public Node(int lowKey, int highKey, int extraKey) {
			this.lowKey = lowKey;
			this.highKey = highKey;
			this.extraKey = extraKey;
		}
		
		// Getters & setters for keys of a Node
		public int getLowKey(Node a) {
			return a.lowKey;
		}
		
		public int getHighKey(Node a) {
			return a.highKey;
		}
		
		
		public void setlowKey(Node x, int theA) {
			x.lowKey = theA;
		}
		
		public void setHighKey(Node x, int theA) {
			x.highKey = theA;
		}

		// Getters & setters for children
		public Node getleft(Node a) {
			return a.leftChild;
		}
		
		public Node getMid(Node a) {
			return a.midChild;
		}
		
		public Node getRight(Node a) {
			return a.rightChild;
		}
		
		
		public void setleft(Node a) {
			leftChild = a;
		}
		
		public void setMid(Node a) {
			midChild = a;
		}
		
		public void setRight(Node a) {
			rightChild = a;
		}
		
		
		
		public Node search(int x) {
			
			Node toSearch = new Node(x);
			for (int i = 0; i < tree.size(); i++) {
				if (tree.get(i).equals(toSearch)) {
					return tree.get(i);
				}
			}
			
			return null;
		}
		
		
		
		public boolean insert(int x) {
			// root.insert(x);
			Node toAdd = new Node(x);
			
			for (int i = 0; i < tree.size(); i++) {							// delete duplicate values
				Node toCheck = tree.get(i);
				if(toCheck.equals(toAdd)) {
					return false;
				}
			}
			
			tree.add(toAdd);													// but which node to add to?
			
			toAdd.setleft(null);
			toAdd.setMid(null);
			toAdd.setRight(null);
			
			/*
			 * if (root == null) {
				root = toAdd;												// should i add this or will it cause problems (and is unnecessary anyway)
			}
			 */
			
			moveUp(toAdd);
			return true;
		}
		
		
		
		// toString for Nodes
		public String toString(Node x) {
			if (getHighKey(x) < getLowKey(x)) {								// Node with only 1 key
				return "" + getLowKey(x);
			}
			else {															// Node with 2 keys
				return getLowKey(x) + " " + getHighKey(x);
			}
		}
		
		
		public void split() {
			
		}
		
		
		
		/*

		// methods for Node
		// equals
		// compareTo
		// split when inserting & node has 3 values
		
		
		contains root
		insert appends at the end of the tree

		insert: if node.size() = 3
		split

		else insert "like normal"


		split() //method


		if children = 4

		make 2 nodes with 2 values each
		

		 */
		

		/*
		public ArrayList<Integer> getRange(Node a) {
			ArrayList<Integer> x = new ArrayList<Integer>();
			
			if (getLeftKey(a) == getRightKey(a)) {														// only one key in this node
				x.set(0, getLeftKey(a));
			}
			else if (getLeftKey(a) < getRightKey(a)) {													// left < right key
				x.set(0, getLeftKey(a));
				x.set(1, getRightKey(a));
			}
			return x;
		}
		*/
	
		}
	
}
